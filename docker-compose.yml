services:
  backend-node:
    container_name: backend-node #pour accéder au conteneur par lien depuis un autre conteneur sans problème
    build:
      context: .
      target: backend_node
    expose:
    - "80"
    restart: on-failure
    env_file:
      - .env
    user: backend_node
    volumes:
      - ./backend:/app
      - backend_modules:/app/node_modules #pour pas écraser les résultats du npm install du dockerfile quand je monte le volume /app
    depends_on:
      - bd_mongo
    networks:
      - nginx-backend
      - backend-bd
  react:
    container_name: react
    build:
      context: .
      target: react
    expose:
      - "3000"
    depends_on:
      - backend-node
    env_file:
      - .env
    restart: on-failure
    user: react
    volumes:
      - ./frontend:/app
      - /app/node_modules

      - react_build:/app/build
    networks:
      - nginx-frontend
  bd_mongo:
    container_name: bd_mongo
    image: mongo:latest
    expose: 
      - "27017"
    env_file:
      - .env
    user: mongodb
    restart: on-failure
    volumes:
      - mongo:/data/db #mongo stocke ses données dans data/db, utile pour pas que les données soient supprimés si on supprime le conteneur
    networks:
      - backend-bd
  nginx:
    build:
      context: .
      target: web_nginx
    ports:
      - "80:80"
      - "3000:80" #pour le hot reloading de react qui est sur le port 3000
    depends_on:
      - backend-node
    volumes:
     - ./nginx/media:/app/media
    networks:
      - nginx-backend
      - nginx-frontend
volumes:
  mongo: #lire explication dans volume bd_mongo, ici c'est pour que docker gère tout seul le volume
  react_build:
  backend_modules:

networks:
  backend-bd:
    driver: bridge
    name: backend-bd
    ipam:
      config:
        - subnet: 192.168.1.0/29 #docker voulait pas me laisser créer de /30, askip il utilise une ip pour lui (autre que l'adresse réseau et broadcast)
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "false"
      com.docker.network.bridge.enable_gateway: "false"

  nginx-backend:
    driver: bridge
    name : nginx-bd
    ipam:
      config:
        - subnet: 192.168.1.8/29
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "false"
      com.docker.network.bridge.enable_gateway: "false"

  nginx-frontend:
    driver: bridge
    name: nginx-frontend
    ipam:
      config:
      - subnet: 192.168.1.16/29
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: "false"
      com.docker.network.bridge.enable_gateway: "false"